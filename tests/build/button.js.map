{
  "version": 3,
  "sources": ["https://jsr.io/@velotype/velotype/0.0.19/src/tsx/tsx-core.ts", "https://jsr.io/@velotype/velotype/0.0.19/src/jsx-runtime/jsx-runtime.ts", "../../src/button.tsx", "../../src/utilities.ts", "../../src/license.ts", "../../src/theme.ts", "../test_modules/module-page.tsx", "../test_modules/button.tsx"],
  "sourcesContent": ["// deno-lint-ignore-file no-unused-vars no-explicit-any\n\n/**\n * These are the types that can be used as a Component's anchor, they can\n * register a componentKey (aka a vtKey) and are mountable/unmountable\n */\nexport type AnchorElement = HTMLElement | SVGSVGElement | MathMLElement\n\n/** Basic primitives that are renderable directly */\nexport type BasicTypes = string | bigint | number | boolean\n\n/** Types that can be returned from Component.render() and FunctionComponent() */\nexport type RenderableElements = AnchorElement | Component<any> | RenderObject<any> | RenderableElements[] | BasicTypes | Text | null | undefined | void\n\n/** Type used to represent a constructor function for a Class */\nexport type TypeConstructor<T> = new (...args: any[]) => T\n\n/** Type used to represent abstract Class passing */\nexport interface Type<T> extends TypeConstructor<T>{}\n\n/** Type used to represent that no Attrs are accepted for a Component */\nexport type EmptyAttrs = Record<string | number | symbol, never>\n\n/** Type used to represent that children are accepted */\nexport type ChildrenAttr = { children?: RenderableElements }\n\n/** Regular console.log() - used for JS minification */\nconst consoleLog = console.log\n\n/** Regular console.error() - used for JS minification */\nconst consoleError = console.error\n\n/** Style display:contents; */\nconst displayContents = {style: 'display:contents;'}\n\n/** Style display:none; */\nconst displayNone = {style: 'display:none;'}\n\n/** String \"div\" */\nconst divTag = 'div'\n\n/** Checks if something is an instanceof HTMLElement */\nfunction instanceOfHTMLElement(something: any): something is HTMLElement {\n    return something instanceof HTMLElement\n}\n/** Checks if something is an instanceof SVGSVGElement */\nfunction instanceOfSVGSVGElement(something: any): something is SVGSVGElement {\n    return something instanceof SVGSVGElement\n}\n/** Checks if something is an instanceof MathMLElement */\nfunction instanceOfMathMLElement(something: any): something is MathMLElement {\n    return something instanceof MathMLElement\n}\n/** Checks if something is an instanceof InternalComponent */\nfunction instanceOfInternalComponent(something: any): something is InternalComponent {\n    return something instanceof InternalComponent\n}\n/** Checks if something is an instanceof RenderObject */\nfunction instanceOfRenderObject(something: any): something is RenderObject<any>  {\n    return something instanceof RenderObject\n}\n/** Checks if something is an instanceof Component */\nfunction instanceOfComponent(something: any): something is Component<any> {\n    return something instanceof Component\n}\n/** Checks if something is an instanceof Text */\nfunction instanceOfText(something: any): something is Text {\n    return something instanceof Text\n}\n/** Checks if somthing is an instanceof any of the BasicTypes (string, bigint, number, boolean) */\nfunction instanceOfBasicTypes(something: any): something is BasicTypes {\n    if (typeof something === 'string' || typeof something === 'bigint' || typeof something === 'number' || typeof something === 'boolean') {\n        return true\n    }\n    return false\n}\n\nfunction hasSetterInPrototypeChain(object: any, fieldName: string): boolean {\n    let currentObject = object\n    while (currentObject) {\n        const descriptor = Object.getOwnPropertyDescriptor(currentObject, fieldName)\n        if (descriptor && (descriptor.set || descriptor.writable)) {\n            return true // Setter found\n        }\n        currentObject = Object.getPrototypeOf(currentObject)\n    }\n    return false // No setter found in the prototype chain\n}\n\n/**\n * Call either setAttribute() of a setter on element (if defined)\n */\nfunction setAttributeHelper(element: Element, name: string, value: any): void {\n    if (hasSetterInPrototypeChain(element, name)) {\n        // Detected property, set directly\n        ;(element as any)[name] = value\n    } else {\n        // No property, set as an attribute\n        element.setAttribute(name, value.toString())\n    }\n}\n\n/**\n * Call either setAttribute() of a setter on element (if defined)\n * \n * Specific to a boolean value to set as empty string when an attribute\n */\nfunction setBooleanAttributeHelper(element: Element, name: string, value: boolean): void {\n    if (hasSetterInPrototypeChain(element, name)) {\n        // Detected property, set boolean type directly\n        ;(element as any)[name] = value\n    } else {\n        // No property, set as an attribute\n        if (name.startsWith('aria-') || name.startsWith('data-')) {\n            // Always set the raw boolean attribute for aria- and data- attributes\n            element.setAttribute(name, String(value))\n        } else {\n            // Boolean true gets set to empty string, boolean false does not get set\n            if (value) {\n                element.setAttribute(name, '')\n            }\n        }\n    }\n}\n\n/** Call getAttribute() - used for JS minification */\nfunction getAttributeHelper(element: Element, qualifiedName: string): string | null {\n    return element.getAttribute(qualifiedName)\n}\n\n/** Call Object.defineProperty() to lock a property so that it cannot be modified later - used for JS minification */\nfunction defineLockedProperty(object: any, key: string, value: any): void {\n    Object.defineProperty(object, key, {\n        value: value,\n        writable: false,\n        configurable: false,\n        enumerable: false\n    })\n}\n\n/** Convert from lowerCamelCase to hypen-case */\nfunction lowerCamelToHypenCase(text: string): string {\n    return text.replace(/[A-Z]/g, function(char) {return '-'+char.toLowerCase()})\n}\n\n/** Map of DOM keys to Velotype Component references */\nconst domReferences: Map<string, InternalComponent | MultiRenderable> = new Map<string, InternalComponent | MultiRenderable>()\n\n/** The next key to use for DOM bindings */\nlet domNextKey: bigint = 1n\n\n/** Attribute name to use for DOM -> Component bindings */\nlet domKeyName = \"vk\"\n\n/** Velotype Event bus - Forward map listeningKey -> vtKey -> listener */\nconst listenersF: Map<string, Map<string, VelotypeEventListener>> = new Map<string,Map<string,VelotypeEventListener>>()\n/** Velotype Event bus - Reverse map vtKey -> listeningKey -> listener */\nconst listenersR: Map<string, Map<string, VelotypeEventListener>> = new Map<string,Map<string,VelotypeEventListener>>()\n\n/** Represents a mounted CSS StyleSheet object */\nexport type StyleSection = {\n    /** Created CSSStyleSheet object that got mounted */\n    sheet: CSSStyleSheet\n    /** Original CSS text used to create the sheet */\n    text: string\n    /** Unique key for this sheet */\n    key: string\n}\n\n/** Map of style keys to ensure each style key is only mounted once */\nconst styleSectionMounted: Map<string, StyleSection> = new Map<string, StyleSection>()\n\n/**\n * App Metadata\n * \n * Stateful storage of various stuffs, this is a Velotype internal object\n * DO NOT USE OR MANPULATE, for debugging only\n */\nexport const __vtAppMetadata = {\n    // ------- For Velotype Core -------\n    /** Key name for DOM bindings, only changeable prior to mounting any Components using `setDomKey()` */\n    domKeyName: domKeyName,\n    /** Map of DOM keys to Velotype Component references */\n    domReferences: domReferences,\n\n    // ------- For Event Bus -------\n    /** Forward map listeningKey -> vtKey -> listener */\n    listenersF: listenersF,\n    /** Reverse map vtKey -> listeningKey -> listener */\n    listenersR: listenersR,\n\n    // ------- For Styles -------\n    /** Map of style keys to ensure each style key is only mounted once */\n    styleSectionMounted: styleSectionMounted,\n\n}\n\n/**\n * Change the attribute name used for DOM -> Component bindings\n * \n * ADVANCED - Usage of this should be rare and must be done prior to construction of any Components\n */\nexport function setDomKey(newKeyName: string) {\n    // Only accept new names when domReferences is empty\n    if (domReferences.size == 0) {\n        domKeyName = newKeyName\n    } else {\n        consoleError(\"Name not accepted\", newKeyName, domReferences.size)\n    }\n}\n\n// ----------------------------------------------------------------------\n//                             DOM handling\n// ----------------------------------------------------------------------\n/**\n * An interface for objects that can hold componentKeys\n */\nexport interface HasVtKey {\n    /**\n     * A unique key per instance of each Velotype renderable object\n     * \n     * These keys are read-only and set by Velotype Core on object construction and are not overridable\n     */\n    readonly vtKey: string\n}\n/**\n * `domReferences.get(key)` - used for JS minification\n */\nfunction getDOMreference(key: string): InternalComponent | MultiRenderable | undefined {\n    return domReferences.get(key)\n}\n/**\n * Acquire a new componentKey to reference component and if (element) then set the domKey attribute\n */\nfunction registerNewVtKey(component: InternalComponent | MultiRenderable, element?: AnchorElement): string {\n    const componentKey = String(domNextKey)\n    domNextKey++\n    if (element) {\n        setAttributeHelper(element, domKeyName, componentKey)\n    }\n    domReferences.set(componentKey, component)\n    return componentKey\n}\n/**\n * Release the reference to this componentKey\n */\nfunction releaseVtKey(vtKey: string): void {\n    domReferences.delete(vtKey)\n}\n/**\n * Release the reference to this object's componentKey\n */\nfunction releaseVtKeyObject(hasVtKey: HasVtKey): void {\n    domReferences.delete(hasVtKey.vtKey)\n}\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------\n//                             Velotype Core\n// ----------------------------------------------------------------------\n\n/**\n * Convert any valid ChildType into an AnchorElement (or undefined)\n */\nfunction childToElement(child: RenderableElements): AnchorElement | undefined {\n    if (instanceOfBasicTypes(child) || instanceOfText(child)) {\n        return createElement(\"span\",null,child)\n    } else if (child) {\n        return renderableElementToElement(child)\n    }\n}\n/**\n * Convert any valid ChildType into a Node (or undefined)\n */\nfunction childToNode(child: RenderableElements): AnchorElement | Text | undefined {\n    if (instanceOfBasicTypes(child)) {\n        return document.createTextNode(child.toString())\n    } else if (instanceOfText(child)) {\n        return child\n    } else if (child) {\n        return renderableElementToElement(child)\n    }\n}\n/**\n * Convert a RenderableElement into an AnchorElement\n */\nfunction renderableElementToElement(child: RenderableElements): AnchorElement {\n    if (instanceOfHTMLElement(child) || instanceOfSVGSVGElement(child) || instanceOfMathMLElement(child)) {\n        return child\n    } else if (instanceOfRenderObject(child)) {\n        return child.renderDefault()\n    } else if (instanceOfComponent(child)) {\n        // Get InternalComponent reference from Component's vtKey\n        const component = getDOMreference(child.vtKey)\n        if (component) {\n            if (instanceOfInternalComponent(component)) {\n                return component.e\n            }\n        }\n    }\n    // If TypeScript is working properly this case should never be hit since\n    // we checked all of the case types above\n    consoleError('Internal typescript error')\n    return hiddenElement()\n}\n/**\n * Appends children to an HTMLElement (unwraps Arrays, generates new instance components for\n * RenderObjects, wraps BasicTypes in TextNodes)\n * \n * @param parent HTMLElement to append to\n * @param child Children to append\n */\nfunction appendChild(parent: HTMLElement | DocumentFragment, child: RenderableElements): void {\n    if (Array.isArray(child)) {\n        for (let i = 0; i < child.length; i++) {\n            appendChild(parent, child[i])\n        }\n    } else {\n        const element = childToNode(child)\n        if (element) {\n            parent.appendChild(element)\n        }\n    }\n}\n\n/**\n * Generates a new \\<div> element that is hidden from the page\n * \n * @returns `<div style=\"display:none;\"/>`\n */\nfunction hiddenElement(): HTMLElement {\n    return createElement(divTag,displayNone) as HTMLDivElement\n}\n\n/**\n * Trigger a callback immediately (though after the event loop clears)\n * \n * @param callback The function to trigger\n */\nfunction vtSetImmediate(callback: () => void): void {\n    // Promise.resolve() is faster than setTimeout(x,0) (uses a Microtask instead of a Task)\n    // Also, per spec setTimeout may have a min of 4ms delay depending on the current nesting level\n    // See:\n    // -: https://www.youtube.com/watch?v=u1kqx6AenYw\n    // -: https://www.trevorlasn.com/blog/setimmediate-vs-settimeout-in-javascript\n    // -: https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers\n    Promise.resolve().then(callback)\n}\n\n/**\n * If a render operation returns a Component, RenderObject, or RenderBasic as a result of\n * render then it needs to be wrapped in another HTMLElement for rendering to work properly\n * \n * @param element The raw rendered element\n * @returns The original element or a wrapped element (or a hidden element if element is falsey)\n */\nfunction wrapElementIfNeeded(element: null | undefined): HTMLElement\nfunction wrapElementIfNeeded(element: SVGSVGElement): AnchorElement\nfunction wrapElementIfNeeded(element: MathMLElement): AnchorElement\nfunction wrapElementIfNeeded(element: HTMLElement): HTMLElement\nfunction wrapElementIfNeeded(element: AnchorElement): AnchorElement\nfunction wrapElementIfNeeded(element: Component<any>): HTMLElement\nfunction wrapElementIfNeeded(element: RenderObject<any>): HTMLElement\nfunction wrapElementIfNeeded(element: Component<any> | RenderObject<any>): HTMLElement\nfunction wrapElementIfNeeded(element: HTMLElement | Component<any> | RenderObject<any> | null | undefined): HTMLElement\nfunction wrapElementIfNeeded(element: RenderableElements | null | undefined): AnchorElement\nfunction wrapElementIfNeeded(element: RenderableElements | null | undefined): AnchorElement {\n    // Check for falsey\n    if (!element) {\n        return hiddenElement()\n    }\n    // If a Component returns a Component or RenderObject as a result of render\n    // then it needs to be wrapped in another HTMLElement for rendering to work properly\n    if (instanceOfBasicTypes(element) || instanceOfComponent(element) || instanceOfRenderObject(element) || instanceOfText(element) || Array.isArray(element) || element.hasAttribute(domKeyName)) {\n        return createElement(divTag,displayContents,element) as HTMLDivElement\n    }\n    return element\n}\n\n/**\n * Represents an object that can render into multiple instance elements\n * \n * These are Velotype internal functions\n * \n * DO NOT CALL these methods directly (will be called by Velotype core)\n */\nexport interface MultiRenderable {\n    /**\n     * Velotype internal function\n     * \n     * DO NOT CALL directly (will be called by Velotype core)\n     * \n     * Used to unmount an instance element of a MultiRenderable object\n     */\n    unmountKey: (key: string) => void\n    /**\n     * Velotype internal function\n     * \n     * DO NOT CALL directly (will be called by Velotype core)\n     * \n     * Used to generate new instance elements of a MultiRenderable object\n     */\n    renderDefault: () => void\n}\n/**\n * Represents a Component that is mountable / unmountable\n */\nexport interface Mountable {\n    /**\n     * Mount is called just after a Component is attached to the DOM\n     */\n    mount: () => void\n\n    /**\n     * Unmount is called just before a Component is removed from the DOM\n     */\n    unmount: () => void\n}\n\n/**\n * Generic object to stash metadata when using a handleUpdate method in RenderObject\n */\nexport class UpdateHandlerLink {\n    /** Reference to the rendered object */\n    result: RenderableElements\n    /** Stashed references to make selected updates more performant */\n    updateRefs: any\n    /** Create a new UpdateHandlerLink */\n    constructor(result: RenderableElements, updateRefs: any) {\n        this.result = result\n        this.updateRefs = updateRefs\n    }\n}\n\n/**\n * Advanced functionality used to more efficiently rerender instance elements in RenderObjects\n */\nexport type RenderObjectHandleUpdateType<DataType> = (element: AnchorElement, updateRefs: any, oldData: DataType, newData: DataType) => void\n\n/**\n * Type for a renderFunction in a RenderObject\n * \n * (currently only supports rendering to HTMLElements for RenderObjectArray)\n */\nexport type RenderObjectRenderFunctionType<DataType> = (data: DataType, thisArg: RenderObject<DataType>) => RenderableElements | UpdateHandlerLink\n\ntype RenderObjectElementsType<DataType> = {\n    /** element */\n    e: AnchorElement\n    /** renderFunction */\n    rF: RenderObjectRenderFunctionType<DataType>\n    /** handleUpdate */\n    hU?: RenderObjectHandleUpdateType<DataType>\n    /** updateRefs */\n    uR?: any\n}\n\n/**\n * An RenderObject is an efficient way of rendering Objects to potentially multiple HTMLElements\n * changes to the value of the underlying Data Object will propogate to all attached elements.\n * \n * @template DataType The type of the underlying Data Object\n * @template UpdateRefsType An advanced capability of RenderObject to more efficiently re-render instance elements\n */\nexport class RenderObject<DataType> implements MultiRenderable, HasVtKey, Mountable {\n    #data: DataType\n    #defaultRenderFunction: RenderObjectRenderFunctionType<DataType>\n    #defaultHandleUpdate?: RenderObjectHandleUpdateType<DataType>\n    readonly #elements = new Map<string, RenderObjectElementsType<DataType>>()\n    /** This RenderObject's vtKey */\n    readonly vtKey: string = registerNewVtKey(this)\n    #hasEventListeners = false\n    readonly #onMounts: Array<()=>void> = []\n    readonly #onUnmounts: Array<()=>void> = []\n    #eventDispatchDelay: number = 0\n    #eventDispatched: boolean = false\n    #eventListeningKey() {\n        // VeloType - Render Object - {key}\n        return `vt-ro-${this.vtKey}`\n    }\n    #emitOnChangeEvent() {\n        emitEvent(this.#eventListeningKey(), new VelotypeEvent(this,'onChange'))\n    }\n    /**\n     * Create a new RenderObject\n     * \n     * @param initialData the initial data to use to render this RenderObject with\n     * @param renderFunction a function that renders a data value into an AnchorElement\n     * @param handleUpdate advanced functionality used to highly optimize rendering on value updates\n     */\n    constructor(initialData: DataType,\n        defaultRenderFunction?: RenderObjectRenderFunctionType<DataType>,\n        defaultHandleUpdate?: RenderObjectHandleUpdateType<DataType>\n    ) {\n        this.#data = initialData\n        this.#defaultRenderFunction = defaultRenderFunction || hiddenElement\n        this.#defaultHandleUpdate = defaultHandleUpdate\n    }\n\n    /**\n     * Register an EventListener to receive an onChange event when the value of this RenderObject changes.\n     * \n     * @param component the Component this RenderObject is created within or a child of the owning Component (has undefined behavior if registered to a non-child of the owning Component)\n     * @param listener the EventListener to register\n     * @param triggerOnRegistration should an onChange event be emitted immediately upon registration? (default: false)\n     * @param eventDispatchDelay to delay (in ms) onChange event dispatch, will dispatch at most one change event per eventDispatchDelay (default: 0)\n     * @returns this\n     */\n    registerOnChangeListener(component: Component<any>, listener: VelotypeEventListener, triggerOnRegistration?: boolean, eventDispatchDelay?: number): RenderObject<DataType> {\n        this.#hasEventListeners = true\n        this.#eventDispatchDelay = (eventDispatchDelay && eventDispatchDelay>0)?eventDispatchDelay:0\n        registerEventListener(component, this.#eventListeningKey(), listener)\n        if (triggerOnRegistration) {\n            vtSetImmediate(() => {this.#emitOnChangeEvent()})\n        }\n        return this\n    }\n    /**\n     * Register a mount/unmount pair to be triggered when the Component that this RenderObject is created within gets mounted / unmounted\n     * \n     * @param onMount callback to be triggered when the Component that this RenderObject is created within gets mounted\n     * @param onUnmount callback to be triggered when the Component that this RenderObject is created within gets unmounted\n     * @returns this\n     */\n    registerOnMount(onMount?: () => void | undefined, onUnmount?: () => void): RenderObject<DataType> {\n        if (onMount) {\n            this.#onMounts.push(onMount)\n        }\n        if (onUnmount) {\n            this.#onUnmounts.push(onUnmount)\n        }\n        return this\n    }\n    /**\n     * Velotype internal function\n     * \n     * DO NOT CALL directly (will be called by Velotype core)\n     * \n     * Used to trigger set of registered onMounts\n     */\n    mount(): void {\n        this.#onMounts.forEach(onMount => {onMount()})\n    }\n    /**\n     * Velotype internal function\n     * \n     * DO NOT CALL directly (will be called by Velotype core)\n     * \n     * Used to trigger set of registered onUnmounts and then trigger `this.removeAll()`\n     */\n    unmount(): void {\n        this.#onUnmounts.forEach(onUnmount => {onUnmount()})\n    }\n    /** Get the current value of this RenderObject */\n    get value(): DataType {\n        return this.#data\n    }\n    /**\n     * Set the current value of this RenderObject\n     * \n     * Will trigger a rerender if (this.value != newData)\n     */\n    set value(newData: DataType) {\n        this.set(newData)\n    }\n    /** Get the current value of this RenderObject */\n    get(): DataType {\n        return this.#data\n    }\n    /**\n     * Set the current value of this RenderObject\n     * \n     * Will trigger rerenderElements if (this.value != newData)\n     */\n    set(newData: DataType): void {\n        if (this.#data != newData) {\n            this.rerenderElements(newData)\n        }\n    }\n    /**\n     * Force a rerender of existing elements and set value to newData\n     * \n     * This method may need to be used in cases where this.value is a complex object\n     * or other data structure that is manipulated in-place rather than reassigned.\n     */\n    rerenderElements(newData: DataType): void {\n        // Rerender Elements\n        Array.from(this.#elements.entries()).forEach(([key, element]) => {\n            if (element.hU && element.uR) {\n                element.hU(element.e, element.uR, this.#data, newData)\n            } else {\n                const render = element.rF(newData, this)\n                if (render instanceof UpdateHandlerLink) {\n                    const newElement = wrapElementIfNeeded(childToElement(render.result))\n                    setAttributeHelper(newElement, domKeyName, key)\n                    replaceElement(element.e, newElement)\n                    this.#elements.set(key, {\n                        e: newElement,\n                        rF: element.rF,\n                        hU: element.hU,\n                        uR: render.updateRefs\n                    })\n                } else {\n                    const newElement = wrapElementIfNeeded(childToElement(render))\n                    setAttributeHelper(newElement, domKeyName, key)\n                    replaceElement(element.e, newElement)\n                    this.#elements.set(key, {\n                        e: newElement,\n                        rF: element.rF,\n                        hU: element.hU\n                    })\n                }\n            }\n        })\n        // Set data\n        this.#data = newData\n        // Trigger EventListeners (if set)\n        if (this.#hasEventListeners) {\n            if (this.#eventDispatchDelay > 0) {\n                // If a delay is set, then use setTimeout to delay the dispatch\n                if (!this.#eventDispatched) {\n                    this.#eventDispatched = true\n                    setTimeout(() => {\n                        this.#eventDispatched = false\n                        this.#emitOnChangeEvent()\n                    }, this.#eventDispatchDelay)\n                }\n            } else {\n                // No delay is set, so emit the event right away\n                this.#emitOnChangeEvent()\n            }\n        }\n    }\n    /**\n     * Velotype internal function\n     * \n     * DO NOT CALL directly (will be called by Velotype core)\n     * \n     * Used to unmount an instance element of this RenderObject\n     */\n    unmountKey(key: string): boolean {\n        const element = this.#elements.get(key)\n        if (element) {\n            const componentKey = getAttributeHelper(element.e, domKeyName)\n            if (key == componentKey) {\n                this.#elements.delete(componentKey)\n                releaseVtKey(componentKey||'')\n                return true\n            } else {\n                consoleError('Invalid state', key, componentKey, element)\n                return false\n            }\n        } else {\n            consoleError('Invalid unmountKey', key)\n            return false\n        }\n    }\n    /**\n     * Used to generate new instance elements of this RenderObject using the\n     * default renderFunction and default handleUpdate function\n     * \n     * No need to call directly (will be called by Velotype core when needed)\n     */\n    renderDefault(): AnchorElement {\n        return this.render(this.#defaultRenderFunction, this.#defaultHandleUpdate)\n    }\n    /**\n     * Trigger rendering of this RenderObject and bind the created element to\n     * the passed renderFunction and handleUpdate function\n     */\n    render(renderFunction: RenderObjectRenderFunctionType<DataType>, handleUpdate?: RenderObjectHandleUpdateType<DataType>): AnchorElement {\n        const render = renderFunction(this.#data, this)\n        const newElement = wrapElementIfNeeded(childToElement((render instanceof UpdateHandlerLink)?render.result:render))\n        const componentKey = registerNewVtKey(this, newElement)\n        this.#elements.set(componentKey, {\n            e: newElement,\n            rF: renderFunction,\n            hU: handleUpdate,\n            uR: (render instanceof UpdateHandlerLink)?render.updateRefs:render\n        })\n        return newElement\n    }\n    /**\n     * Get the rendered elements of this RenderObject\n     * \n     * THIS IS ADVANCED FUNCTIONALITY - use carefully\n     */\n    getElements(): AnchorElement[] {\n        return Array.from(this.#elements.values()).map((e)=>e.e)\n    }\n    /**\n     * Removes all instance elements that this RenderObject has generated\n     */\n    removeAll(): void {\n        this.#elements.entries().forEach(([key, element]) => {\n            removeElement(element.e)\n            releaseVtKey(key)\n        })\n        this.#elements.clear()\n    }\n}\n\n/**\n * A specialization of an RenderObject when the DataType is a BasicType\n * \n * The BasicTypes are string | number | bigint | boolean\n */\nexport class RenderBasic<DataType extends BasicTypes> extends RenderObject<DataType> implements MultiRenderable, HasVtKey, Mountable {\n    /** Create a new BasicComponent */\n    constructor(initialData: DataType) {\n        super(initialData, function(data: DataType) {\n            return createElement('span', displayContents, data.toString()) as HTMLSpanElement\n        })\n    }\n    /**\n     * Register an EventListener to receive an onChange event when the value of\n     * this RenderBasic changes.\n     * \n     * @param component the Component this RenderBasic is created within or a child of the owning Component (has undefined behavior if registered to a non-child of the owning Component)\n     * @param listener the EventListener to register\n     * @param triggerOnRegistration should an onChange event be emitted immediately upon registration? (default: false)\n     * @param eventDispatchDelay to delay (in ms) onChange event dispatch, will dispatch at most one change event per eventDispatchDelay (default: 0)\n     * @returns this\n     */\n    override registerOnChangeListener(component: Component<any>, listener: VelotypeEventListener, triggerOnRegistration?: boolean): RenderBasic<DataType> {\n        super.registerOnChangeListener(component, listener, triggerOnRegistration)\n        return this\n    }\n    /**\n     * Register a mount/unmount pair to be triggered when the Component that this RenderBasic is created within gets mounted / unmounted\n     * \n     * @param onMount callback to be triggered when the Component that this RenderBasic is created within gets mounted\n     * @param onUnmount callback to be triggered when the Component that this RenderBasic is created within gets unmounted\n     * @returns this\n     */\n    override registerOnMount(onMount: () => void, onUnmount: () => void): RenderBasic<DataType> {\n        super.registerOnMount(onMount, onUnmount)\n        return this\n    }\n    /**\n     * Get the value of this BasicComponent as a String\n     */\n    getString(): string {\n        return String(super.get())\n    }\n    /**\n     * Set the value of this BasicComponent from a String\n     */\n    setString(newDataString: string): void {\n        const data: DataType = super.get()\n        if (typeof data === 'string') {\n            this.set(newDataString as DataType)\n        } else if (typeof data === 'bigint') {\n            this.set((BigInt(newDataString)) as DataType)\n        } else if (typeof data === 'number') {\n            this.set((Number(newDataString)) as DataType)\n        } else if (typeof data === 'boolean') {\n            this.set((Boolean(newDataString)) as DataType)\n        }\n    }\n}\n\n/**\n * A Velotype Function Component that can be used in .tsx files to render HTML Components.\n * Does not support mount and unmount lifecycle events.\n */\nexport type FunctionComponent<AttrsType> = (attrs: Readonly<AttrsType>, children: RenderableElements[]) => RenderableElements\n\n/**\n * A Velotype Class Component that can be used in .tsx files to render HTML Components.\n * Supports unmount, render, mount lifecycle events.\n */\nexport abstract class Component<AttrsType> implements HasVtKey, Mountable {\n\n    /** The attributes this Component was created with */\n    attrs: AttrsType\n\n    /** The children this Component was created with */\n    children: RenderableElements[]\n\n    /** constructor gets attrs and children */\n    constructor(attrs: Readonly<AttrsType>, children: RenderableElements[]){\n        this.attrs = attrs\n        this.children = children\n    }\n\n    /**\n     * Mount is called just after this Component is attached to the DOM.\n     * \n     * May be overriden by a specific Component that extends Component\n     */\n    mount(): void {}\n\n    /**\n     * Unmount is called just before this Component is removed from the DOM.\n     * \n     * May be overriden by a specific Component that extends Component\n     */\n    unmount(): void {}\n\n    /**\n     * Render is called when this Component needs to be materialized into Elements.\n     * \n     * To be overriden by a specific Component that extends Component\n     * @param {Readonly<AttrsType>} attrs The attrs for this Component\n     * @param {RenderableElements[]} children Any children of this Component\n     */\n    abstract render(attrs: Readonly<AttrsType>, children: RenderableElements[]): RenderableElements\n\n    /**\n     * Trigger re-rendering of this Component and all child Components.\n     * This will unmount and delete all child Components, then call\n     * this.render() and consequently new and mount a fresh set of child Components.\n     * \n     * This is set by Velotype Core on Component construction and is not overridable\n     */\n    refresh(): void {}\n\n    /**\n     * A unique key per instance of each Component.\n     * \n     * This is read-only and set by Velotype Core on Component construction and is not overridable\n     */\n    readonly vtKey: string = \"\"\n\n    /**\n     * Replace a Child element with a newly constructed element\n     * \n     * This is set by Velotype Core on Component construction and is not overridable\n     * \n     * @param child a child element of this Component\n     * @param newChild the element to replace with\n     * @returns newElement when replacement is successful, otherwise returns child\n     */\n    replaceChild(child: AnchorElement, newChild: RenderableElements): AnchorElement {return child}\n\n    /**\n     * Append a newly constructed element to a child element\n     * \n     * This is set by Velotype Core on Component construction and is not overridable\n     * \n     * @param child a child element of this Component\n     * @param toAppendChild the element to append\n     * @returns boolean for if replacement was accepted (will reject if the input child element is not a child of this Component)\n     */\n    appendToChild(child: HTMLElement, toAppendChild: RenderableElements): boolean {return false}\n\n    /**\n     * Prepend a newly constructed element to a child element\n     * \n     * This is set by Velotype Core on Component construction and is not overridable\n     * \n     * @param child a child element of this Component\n     * @param toPrependChild the element to prepend\n     * @returns boolean for if replacement was accepted (will reject if the input child element is not a child of this Component)\n     */\n    prependToChild(child: HTMLElement, toPrependChild: RenderableElements): boolean {return false}\n\n    /**\n     * Replace the children of a child element\n     * \n     * This is set by Velotype Core on Component construction and is not overridable\n     * \n     * @param child a child element of this Component\n     * @param toPrependElement the element to prepend\n     * @returns boolean for if replacement was accepted (will reject if the input child element is not a child of this Component)\n     */\n    replaceChildrenOfChild(child: HTMLElement, newChildren: RenderableElements[]): boolean {return false}\n\n    /**\n     * Remove a child element\n     * \n     * This is set by Velotype Core on Component construction and is not overridable\n     * \n     * @param child a child element of this Component\n     * @returns boolean for if removal was accepted (will reject if the input child element is not a child of this Component)\n     */\n    removeChild(child: HTMLElement): boolean {return false}\n}\n\n/**\n * Replace an element with a newElement\n * \n * Note: this will detect if the element hasFocus and will set newElement.focus() if needed\n */\nfunction replaceElement(element: AnchorElement, newElement: AnchorElement): AnchorElement {\n    const isFocused = document.hasFocus() ? document.activeElement == element : false\n    if (instanceOfHTMLElement(element)) {\n        unmountComponentElementChildren(element)\n    }\n    element.replaceWith(newElement)\n    if (instanceOfHTMLElement(newElement)) {\n        mountComponentElementChildren(newElement)\n    }\n    if (isFocused) {\n        newElement.focus()\n    }\n    return newElement\n}\n/**\n * Appends a toAppendElement to an element and will mount the appended toAppendElement\n */\nfunction appendElement(element: HTMLElement, toAppendElement: AnchorElement): void {\n    element.appendChild(toAppendElement)\n    mountComponentElement(toAppendElement)\n}\n/**\n * Prepends a toPrependElement to an element and will mount the prepended toPrependElement\n */\nfunction prependElement(element: HTMLElement, toPrependElement: AnchorElement): void {\n    element.prepend(toPrependElement)\n    mountComponentElement(toPrependElement)\n}\n/**\n * Replaces all children of a given element\n * \n * Will unmount the old children, replaceChildren(...newChildren), then mount the newChildren\n */\nfunction replaceChildren(element: HTMLElement, newChildren: AnchorElement[]): void {\n    unmountComponentElementChildren(element)\n    element.replaceChildren(...newChildren)\n    mountComponentElementChildren(element)\n}\n/**\n * Will unmount an element and then `.remove()` it\n */\nfunction removeElement(element: AnchorElement): void {\n    unmountComponentElement(element)\n    element.remove()\n}\n\n/**\n * Internal Velotype Component object\n */\nclass InternalComponent {\n\n    constructor(component: Component<any>, attrs: Readonly<any>, children: RenderableElements[]) {\n        this.c = component\n        this.a = attrs\n        this.h = children\n\n        // Assign this Component's componentKey\n        this.k = registerNewVtKey(this)\n\n        // Set locked Component properties so that they cannot be modified later\n        defineLockedProperty(component, \"vtKey\", this.k)\n        defineLockedProperty(component, \"refresh\", this.f)\n        defineLockedProperty(component, \"replaceChild\", this.q)\n        defineLockedProperty(component, \"appendToChild\", this.w)\n        defineLockedProperty(component, \"prependToChild\", this.t)\n        defineLockedProperty(component, \"replaceChildrenOfChild\", this.y)\n        defineLockedProperty(component, \"removeChild\", this.u)\n\n        // Initial render of this component\n        this.e = componentRender(this, this.a, this.h)\n    }\n\n    /**\n     * Stashes the Velotype Component defined by the user\n     */\n    c: Component<any>\n\n    /**\n     * Stashes a reference to the root AnchorElement of this Component.\n     */\n    e: AnchorElement\n\n    /**\n     * Stashes the Component vtKey for this Component\n     */\n    readonly k: string\n\n    /**\n     * Stashes the attrs for this Component\n     */\n    a: Readonly<any>\n\n    /**\n     * Stashes the children for this Component\n     */\n    h: RenderableElements[]\n\n    /**\n     * Trigger unmount for this Component's children, then re-render\n     * this Component and then mount new children.\n     */\n    f: () => void = (): void => {\n        this.e = replaceElement(this.e, componentRender(this, this.a, this.h))\n    }\n\n    /**\n     * Release this Component's ComponentKey\n     */\n    r: () => void = (): void => {\n        releaseVtKey(this.k)\n    }\n\n    /**\n     * replaceChild()\n     */\n    q: (child: AnchorElement, newChild: RenderableElements) => AnchorElement = (child: AnchorElement, newChild: RenderableElements): AnchorElement => {\n        if (this.e.contains(child)) {\n            return replaceElement(child, renderableElementToElement(newChild))\n        } else {\n            return child\n        }\n    }\n\n    /**\n     * appendToChild()\n     */\n    w: (child: HTMLElement, toAppend: RenderableElements) => boolean = (child: HTMLElement, toAppend: RenderableElements): boolean => {\n        if (this.e.contains(child)) {\n            appendElement(child, renderableElementToElement(toAppend))\n            return true\n        } else {\n            return false\n        }\n    }\n    /**\n     * prependToChild()\n     */\n    t: (child: HTMLElement, toPreppend: RenderableElements) => boolean = (child: HTMLElement, toPreppend: RenderableElements): boolean => {\n        if (this.e.contains(child)) {\n            prependElement(child, renderableElementToElement(toPreppend))\n            return true\n        } else {\n            return false\n        }\n    }\n    /**\n     * replaceChildrenOfChild()\n     */\n    y: (child: HTMLElement, newChildren: RenderableElements[]) => boolean = (child: HTMLElement, newChildren: RenderableElements[]): boolean => {\n        if (this.e.contains(child)) {\n            replaceChildren(child, newChildren.map(c=>renderableElementToElement(c)))\n            return true\n        } else {\n            return false\n        }\n    }\n    /**\n     * removeChild()\n     */\n    u: (child: AnchorElement) => boolean = (child: AnchorElement): boolean => {\n        if (this.e.contains(child)) {\n            removeElement(child)\n            return true\n        } else {\n            return false\n        }\n    }\n    \n}\n\n/**\n * Traverse the children of element and call callback for any element that has a componentKey\n * with the linked InternalComponent | MultiRenderable\n * \n * @param element the element to search through\n * @param callback the callback to trigger\n */\nfunction traverseElementChildren(element: Element, callback: (component: InternalComponent | MultiRenderable, key: string) => void): void {\n    if (instanceOfHTMLElement(element) || instanceOfSVGSVGElement(element) || instanceOfMathMLElement(element)) {\n        for (let i = 0; i < element.children.length; i++) {\n            const child = element.children[i]\n            traverseElementChildren(child, callback)\n            const key = getAttributeHelper(child,domKeyName)\n            if (key) {\n                const component = getDOMreference(key)\n                if (component) {\n                    callback(component, key)\n                }\n            }\n        }\n    }\n}\n\n/**\n * Call `.mount()` on linked Components\n */\nfunction mountComponentElementHelper(component: InternalComponent | MultiRenderable, _key: string): void {\n    if (instanceOfInternalComponent(component)) {\n        const internalComponent = component as InternalComponent\n        // Mount the main Component\n        internalComponent.c.mount()\n        // Iterate component fields and trigger their mounts\n        Object.entries(internalComponent.c).forEach(array => {\n            const enumberableValue = array[1]\n            if (instanceOfRenderObject(enumberableValue)) {\n                enumberableValue.mount()\n            }\n        })\n    }\n}\n/**\n * Mount this element and all children\n */\nfunction mountComponentElement(element: AnchorElement): void {\n    if (instanceOfHTMLElement(element)) {\n        mountComponentElementChildren(element)\n    }\n    const key = getAttributeHelper(element,domKeyName)\n    if (key) {\n        const component = getDOMreference(key)\n        if (component) {\n            mountComponentElementHelper(component, key)\n        }\n    }\n}\n/**\n * Mount the children of this element\n */\nfunction mountComponentElementChildren(element: HTMLElement): void {\n    traverseElementChildren(element, mountComponentElementHelper)\n}\n/**\n * Call `.unmount()` on linked Components and release vtKeys\n */\nfunction unmountComponentElementHelper(component: InternalComponent | MultiRenderable, key: string): void {\n    if (instanceOfInternalComponent(component)) {\n        // component: InternalComponent\n        removeComponentListeners(component.c)\n        // Unmount the main Component\n        component.c.unmount()\n        // Iterate component fields and trigger their unmounts\n        Object.entries(component.c).forEach(array => {\n            const enumberableValue = array[1]\n            if (instanceOfRenderObject(enumberableValue)) {\n                enumberableValue.unmount()\n                releaseVtKeyObject(enumberableValue)\n            } else if (instanceOfComponent(enumberableValue)) {\n                releaseVtKeyObject(enumberableValue)\n            }\n        })\n        // Release the Component's vtKey\n        component.r()\n    } else {\n        // component: MultiRenderable\n        component.unmountKey(key)\n    }\n}\n/**\n * Unmount the children of this element\n */\nfunction unmountComponentElementChildren(element: HTMLElement): void {\n    traverseElementChildren(element, unmountComponentElementHelper)\n}\n/**\n * Unmount this element and all of its children\n */\nfunction unmountComponentElement(element: AnchorElement): void {\n    if (instanceOfHTMLElement(element)) {\n        unmountComponentElementChildren(element)\n    }\n    const key = getAttributeHelper(element,domKeyName)\n    if (key) {\n        const component = getDOMreference(key)\n        if (component) {\n            unmountComponentElementHelper(component, key)\n        }\n    }\n}\n/**\n * Render a Component into an AnchorElement\n */\nfunction componentRender(classComponent: InternalComponent, attrs: Readonly<any>, children: RenderableElements[]): AnchorElement {\n    const render: AnchorElement = wrapElementIfNeeded(classComponent.c.render(attrs, children))\n    setAttributeHelper(render, domKeyName, classComponent.k)\n    return render\n}\n\n/**\n * Sets attributes on an element\n * \n * Resolves: eventListeners, style object, and processes boolean values\n * \n * eventListeners support `<div onClick:{()=>{alert()}} />`\n * \n * and eventListeners support `<div onClick:{{handler: ()=>{alert()}, options: AddEventListenerOptions | boolean}} />`\n * \n * Boolean values are set as empty attributes when true and unset when false\n */\nexport function setAttrsOnElement(element: AnchorElement, attrs?: Readonly<any> | null): void {\n    if (!attrs) {\n        return\n    }\n    for (const [name, value] of Object.entries(attrs || {})) {\n        if (name.startsWith('on') && name.length > 4) {\n            // Special handling for event listener attributes\n            //\n            // Example attrs:\n            //   <div onClick={()=>{}} >\n            //   <div onClick={{handler: ()=>{}, options: {once: true}}} >\n            //\n            // The length check of 4 is to allow the name[2] test below and to guarantee that\n            // eventName will be at least one char in length. Works because all standard browser\n            // events have at least 2 chars in their name.\n\n            if (value) { // Check for <div onClick={null}>\n                let options: boolean | AddEventListenerOptions | undefined = undefined\n                let handler: (this: HTMLElement, ev: Event | UIEvent | WheelEvent) => any = value\n                if (typeof value !== 'function' && value.handler && value.options !== undefined) {\n                    handler = value.handler\n                    options = value.options\n                }\n                // Extract the event name:\n                // If the name has a dash after \"on\" like: <div on-custom-eventNAME={()=>{}} > then the name is extracted exactly as-is\n                // If the name does not have a dash after \"on\" then the name is lower cased\n                const eventName = (name[2] == '-') ? name.slice(3) : name.slice(2).toLowerCase()\n                element.addEventListener(eventName, handler, options)\n            }\n        } else if (name == 'style' && value instanceof Object) {\n            // Special handling for style object\n            for (const key of Object.keys(value)) {\n                const keyValue: string | number = (value[key] === null || value[key] === undefined) ? '' : value[key]\n                const stringKeyValue = (typeof keyValue == 'number') ? keyValue.toString() : keyValue\n                const style = element.style\n                if (stringKeyValue.endsWith('!important')) {\n                    // Important requires setProperty() call\n                    style.setProperty(lowerCamelToHypenCase(key), stringKeyValue.substring(0, stringKeyValue.length - 10), 'important')\n                } else {\n                    if (hasSetterInPrototypeChain(style,key)) {\n                        // Note: any is used here because \"keyof typeof element.style\" clashes with \"length\" and \"parentRule\" being readonly\n                        style[key as any] = stringKeyValue\n                    } else {\n                        style.setProperty(key, stringKeyValue)\n                    }\n                }\n            }\n        } else if (typeof value == 'boolean') {\n            setBooleanAttributeHelper(element, name, value)\n        } else if (typeof value == 'function') {\n            // Avoid setting the attribute if the value is a function\n        } else if (value || value == \"\") {\n            // Regular attribute\n            setAttributeHelper(element, name, value)\n        }\n    }\n}\n\n// Note: the react-jsx transform can in an edge case call createElement()\n// so this must be exported\n// See: https://github.com/facebook/react/issues/20031#issuecomment-710346866\n/**\n * Create an element with a tag, set it's attributes using attrs, then append children\n * \n * ```tsx\n * <tag attrOne={} attrTwo={}>{children}</tag>\n * ```\n */\nexport function createElement(tag: 'span', attrs: Readonly<any> | null, ...children: RenderableElements[]): HTMLSpanElement\n/**\n * Create an element with a tag, set it's attributes using attrs, then append children\n * \n * ```tsx\n * <tag attrOne={} attrTwo={}>{children}</tag>\n * ```\n */\nexport function createElement(tag: 'div', attrs: Readonly<any> | null, ...children: RenderableElements[]): HTMLDivElement\n/**\n * Create an element with a tag, set it's attributes using attrs, then append children\n * \n * ```tsx\n * <tag attrOne={} attrTwo={}>{children}</tag>\n * ```\n */\nexport function createElement(tag: string, attrs: Readonly<any> | null, ...children: RenderableElements[]): HTMLElement\n/**\n * Create an element with a tag, set it's attributes using attrs, then append children\n * \n * ```tsx\n * <tag attrOne={} attrTwo={}>{children}</tag>\n * ```\n */\nexport function createElement(tag: Type<Component<any>>, attrs: Readonly<any> | null, ...children: RenderableElements[]): HTMLElement\n/**\n * Create an element with a tag, set it's attributes using attrs, then append children\n * \n * ```tsx\n * <tag attrOne={} attrTwo={}>{children}</tag>\n * ```\n */\nexport function createElement(tag: FunctionComponent<any>, attrs: Readonly<any> | null, ...children: RenderableElements[]): RenderableElements[] | AnchorElement | BasicTypes\n/**\n * Create an element with a tag, set it's attributes using attrs, then append children\n * \n * ```tsx\n * <tag attrOne={} attrTwo={}>{children}</tag>\n * ```\n */\nexport function createElement(tag: Type<Component<any>> | FunctionComponent<any> | string, attrs: Readonly<any> | null, ...children: RenderableElements[]): RenderableElements[] | AnchorElement | BasicTypes {\n    const notNullAttrs = attrs || {}\n    if (typeof tag === 'string') {\n        // Base HTML Element\n        const element = document.createElement(tag)\n        setAttrsOnElement(element, notNullAttrs)\n        if (tag == 'template') {\n            // Template elements' children get attached to the DocumentFragment content\n            appendChild((element as HTMLTemplateElement).content, children)\n        } else {\n            // Append children to the element\n            appendChild(element, children)\n        }\n        return element\n    } else if (instanceOfComponent(tag.prototype)) {\n        // Create and register Component\n        const internalComponent = new InternalComponent(\n            new (tag as Type<Component<any>>)(notNullAttrs, children),\n            notNullAttrs,\n            children\n        )\n        return internalComponent.e\n    } else if (typeof tag === 'function') {\n        // Function Component\n        const output = (tag as FunctionComponent<any>)(notNullAttrs, children)\n        // Note: These if-clauses are set this way for TypeScript type inference\n        if (instanceOfBasicTypes(output)) {\n            return output\n        } else if (Array.isArray(output)) {\n            return output\n        } else if (instanceOfSVGSVGElement(output)) {\n            return wrapElementIfNeeded(output)\n        } else if (instanceOfMathMLElement(output)) {\n            return wrapElementIfNeeded(output)\n        } else {\n            return wrapElementIfNeeded(output)\n        }\n    }\n\n    // Fallback case\n    consoleError('Invalid tag', tag, notNullAttrs, children)\n    return hiddenElement()\n}\n\n/**\n * Create an fragment \\<></> (which just propagates an array of children[])\n */\nexport function createFragment(_attrs: Readonly<any>, ...children:  RenderableElements[]): RenderableElements[] {\n    return children\n}\n\n/**\n * Get the js class object of a constructed Component\n * \n * Usage:\n * \n * ```tsx\n * class ComplexComponent extends Component<EmptyAttrs> {\n *     override render() {\n *         return <div>This is a complex Component</div>\n *     }\n *     someMethod() {\n *         console.log(\"ComplexComponent method called\")\n *     }\n * }\n * \n * //Somewhere else\n * const foo = getComponent(<ComplexComponent/>)\n * foo.someMethod()\n * \n * //Can then be used in tsx directly:\n * return <div>{foo}</div>\n * ```\n */\nexport function getComponent<T>(componentElement: RenderableElements[] | AnchorElement | BasicTypes | null): T {\n    if (!componentElement || componentElement instanceof Text || instanceOfBasicTypes(componentElement) || Array.isArray(componentElement)) {\n        // Invalid case\n        consoleError(\"Invalid element\", componentElement)\n        return null as T\n    }\n    const component = getDOMreference(getAttributeHelper(componentElement,domKeyName)||\"\")\n    if (component && instanceOfInternalComponent(component)) {\n        return component.c as T\n    } else {\n        // Invalid case\n        consoleError(\"Invalid element\", componentElement)\n        return null as T\n    }\n}\n\n/**\n * Replaces an element that is on the document with a rootComponent\n */\nexport function replaceElementWithRoot(rootComponent: AnchorElement, element: HTMLElement): AnchorElement {\n    element.replaceWith(rootComponent)\n    mountComponentElement(rootComponent)\n    return rootComponent\n}\n\n/**\n * Parameters used on RenderObjectArray construction\n * \n * @wrapperElementTag the HTML tag to use for the wrapper element (defaults to a \\<div/> tag)\n * @wrapperAttrs attributes to set on the wrapper element\n * @renderFunction the renderFunction to pass to the underlying RenderObject instances on each data point\n * @handleUpdate advanced functionality used to more efficiently rerender instance elements\n */\nexport type RenderObjectArrayOptions<DataType> = {\n    wrapperElementTag?: string,\n    wrapperAttrs?: any,\n    renderFunction: RenderObjectRenderFunctionType<DataType>,\n    handleUpdate?: RenderObjectHandleUpdateType<DataType>\n}\n/**\n * An optimized RenderObject that represents an Array of data points rendered into\n * a wrapperElement (by default a \\<div> tag)\n * \n * @template DataType The type of the underlying Data Object\n * @template UpdateRefsType An advanced capability of RenderObjectArray to more efficiently rerender instance elements\n */\nexport class RenderObjectArray<DataType> extends RenderObject<RenderObject<DataType>[]> {\n    #renderFunction: RenderObjectRenderFunctionType<DataType>\n    #handleUpdate?: RenderObjectHandleUpdateType<DataType>\n    /**\n     * Create a new RenderObjectArray\n     * \n     * Options parameters used on RenderObjectArray construction:\n     * \n     * @wrapperElementTag the HTML tag to use for the wrapper element (defaults to a \\<div/> tag)\n     * @wrapperAttrs attributes to set on the wrapper element\n     * @renderFunction the renderFunction to pass to the underlying RenderObject instances on each data point\n     * @handleUpdate advanced functionality used to more efficiently rerender instance elements\n     */\n    constructor(options: RenderObjectArrayOptions<DataType>) {\n        super([], (data: RenderObject<DataType>[]) => {\n            const mainElement: HTMLElement = createElement(options.wrapperElementTag || divTag, displayContents) as HTMLElement\n            setAttrsOnElement(mainElement, options.wrapperAttrs)\n            data.forEach(d => {\n                mainElement.appendChild(renderableElementToElement(d))\n            })\n            return mainElement\n        })\n        this.#renderFunction = options.renderFunction\n        this.#handleUpdate = options.handleUpdate\n    }\n    /**\n     * Push one data point into the Array\n     */\n    push(newData: DataType): void {\n        const obj = new RenderObject<DataType>(newData, this.#renderFunction, this.#handleUpdate)\n        this.value.push(obj)\n        this.getElements().forEach(element => {\n            element.appendChild(renderableElementToElement(obj))\n        })\n    }\n    /**\n     * Push all of the data points of newData[] into the Array\n     */\n    pushAll(newData: DataType[]): void {\n        newData.forEach(d => {\n            const obj = new RenderObject<DataType>(d, this.#renderFunction, this.#handleUpdate)\n            this.getElements().forEach(element => {\n                element.appendChild(renderableElementToElement(obj))\n            })\n            this.value.push(obj)\n        })\n    }\n    /**\n     * Delete one or more data points from the Array\n     */\n    deleteAt(startIndex: number, deleteCount?: number): void {\n        const oldData = this.value.splice(startIndex, (deleteCount!==undefined&&deleteCount>0)?deleteCount:1)\n        oldData.forEach(function(d){\n            d.unmount()\n            d.removeAll()\n            releaseVtKey(d.vtKey)\n        })\n    }\n    /**\n     * Delete a data point from the Array by value\n     * \n     * (note: uses Array.findIndex() so runs in linear time)\n     */\n    delete(data: DataType): void {\n        const found = this.value.findIndex(x=>x.value==data)\n        if (found >= 0) {\n            this.deleteAt(found, 1)\n        }\n    }\n    /**\n     * Get the Data value at index\n     */\n    getAt(index: number): DataType {\n        return this.value[index].value\n    }\n    /**\n     * Set the value at index to newData\n     */\n    setAt(index: number, newData: DataType): void {\n        this.value[index].value = newData\n    }\n    /** Set the current value of this RenderObjectArray */\n    override get value(): RenderObject<DataType>[] {\n        return super.get()\n    }\n    /** Set the current value of this RenderObjectArray */\n    override set value(newData: RenderObject<DataType>[]) {\n        this.set(newData)\n    }\n    /** Set the current value of this RenderObjectArray */\n    override set(newData: RenderObject<DataType>[]): void {\n        this.#releaseAll()\n        super.set(newData)\n    }\n    /** Will unmount and release all rendered instances of this RenderObjectArray */\n    override unmount(): void {\n        super.unmount()\n        this.#releaseAll()\n        this.value = []\n    }\n    /** Release the old underlying RenderObjects */\n    #releaseAll(): void {\n        this.value.forEach(function(d){\n            d.unmount()\n            d.removeAll()\n            releaseVtKey(d.vtKey)\n        })\n    }\n    /**\n     * Gets the length of the Array\n     */\n    get length(): number {\n        return this.value.length\n    }\n    /**\n     * Clears the Array of all data\n     */\n    clear(): void {\n        this.#releaseAll()\n        this.value = []\n    }\n}\n\n/** Attributes type for the HTML Component */\nexport type HTMLAttrsType = {\n    /** which html tag to use for this element (defaults to \\<div>, does not support \\<svg> or \\<math>) */\n    tag?: string\n    /** content to use in innerHTML */\n    html: string\n}\n/**\n * Fully custom HTML\n * \n * Two special attrs:\n * \n * tag:string - which html tag to use for this element (defaults to \\<div>, does not support \\<svg> or \\<math>)\n * \n * html:string - content to use in innerHTML\n */\nexport class HTML<AttrsType extends HTMLAttrsType = HTMLAttrsType> extends Component<AttrsType> {\n    /**\n     * Renders this into a generic HTML element\n     */\n    override render(attrs: AttrsType): HTMLElement {\n        const html = attrs.html\n        const tag = attrs.tag\n        const tempAttrs: any = {...attrs}\n        delete tempAttrs.html\n        delete tempAttrs.tag\n        const container = createElement(tag || divTag, tempAttrs) as HTMLElement\n        container.innerHTML = html || \"\"\n        return container\n    }\n}\n\n/** Attributes type for the SVG Component */\nexport type SVGAttrsType = {\n    /** content to use in innerHTML of the \\<svg> element */\n    svg: string\n}\n\n/**\n * Custom SVG element\n * \n * One special attr:\n * \n * svg:string - content to use in innerHTML of the \\<svg> element\n */\nexport class SVG<AttrsType extends SVGAttrsType = SVGAttrsType> extends Component<AttrsType> {\n    /**\n     * Renders this into a \\<svg\\> element\n     */\n    override render(attrs: Readonly<AttrsType>): SVGSVGElement {\n        const svg = attrs.svg\n        const tempAttrs: any = {...attrs}\n        delete tempAttrs.svg\n        const container = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\") as SVGSVGElement\n        setAttrsOnElement(container, tempAttrs)\n        container.innerHTML = svg || \"\"\n        return container\n    }\n}\n\n/** Attributes type for the MATH Component */\nexport type MATHAttrsType = {\n    /** content to use in innerHTML of the \\<math> element */\n    math: string\n}\n/**\n * Custom MathML element\n * \n * One special attr:\n * \n * svg:string - content to use in innerHTML of the svg element\n */\nexport class MATH<AttrsType extends MATHAttrsType = MATHAttrsType> extends Component<AttrsType> {\n    /**\n     * Renders this into a \\<math\\> element\n     */\n    override render(attrs: Readonly<AttrsType>): MathMLElement {\n        const math = attrs.math\n        const tempAttrs: any = {...attrs}\n        delete tempAttrs.math\n        const container = document.createElementNS(\"http://www.w3.org/1998/Math/MathML\", \"math\") as MathMLElement\n        setAttrsOnElement(container, tempAttrs)\n        container.innerHTML = math || \"\"\n        return container\n    }\n}\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\n\n\n// ----------------------------------------------------------------------\n//                             Event bus\n// ----------------------------------------------------------------------\n\n/**\n * An Event object\n */\nexport class VelotypeEvent {\n    /**\n     * Link to the emitting object\n     */\n    emittingObject: Component<any> | RenderObject<any>\n    /**\n     * A simple string representing the type of event\n     */\n    event: string\n    /**\n     * Generic metadata about the event\n     */\n    data: any | undefined\n    /**\n     * Create a new VelotypeEvent\n     */\n    constructor(emittingObject: Component<any> | RenderObject<any>, event: string, data?: any) {\n        this.emittingObject = emittingObject\n        this.event = event\n        this.data = data\n    }\n}\n\n/**\n * A Velotype Event Listener\n */\nexport type VelotypeEventListener = (event: VelotypeEvent) => void\n\n/**\n * Register an Event listener\n * \n * Will receive all events dispatched with the listeningKey\n * \n * Will be automatically cleaned up when the hasVtKey Component is released\n */\nexport function registerEventListener(hasVtKey: HasVtKey, listeningKey: string, listener: VelotypeEventListener): void {\n    registerListenerMap(listenersF, listeningKey, hasVtKey.vtKey, listener)\n    registerListenerMap(listenersR, hasVtKey.vtKey, listeningKey, listener)\n}\n/**\n * Optimization function to register listeners to double maps\n */\nfunction registerListenerMap(map: Map<string,Map<string,VelotypeEventListener>>, firstKey: string, secondKey: string, listener: VelotypeEventListener): void {\n    const keyListeners = map.get(firstKey)\n    if (keyListeners !== undefined) {\n        keyListeners.set(secondKey, listener)\n    } else {\n        const newKeyListeners = new Map<string,VelotypeEventListener>()\n        newKeyListeners.set(secondKey, listener)\n        map.set(firstKey, newKeyListeners)\n    }\n}\n/**\n * Manually remove and clean up all EventListeners that are listening to\n * a particular hasVtKey Component and listeningKey\n */\nexport function removeEventListeners(hasVtKey: HasVtKey, listeningKey: string): void {\n    removeListenerMap(listenersF, listeningKey, hasVtKey.vtKey)\n    removeListenerMap(listenersR, hasVtKey.vtKey, listeningKey)\n}\n/**\n * Cleanup all EventListeners that are registered with a hasVtKey Component\n */\nfunction removeComponentListeners(hasVtKey: HasVtKey): void {\n    const keyListeners = listenersR.get(hasVtKey.vtKey)\n    if (keyListeners) {\n        Array.from(keyListeners.keys()).forEach(listeningKey => {\n            removeListenerMap(listenersF, listeningKey, hasVtKey.vtKey)\n            removeListenerMap(listenersR, hasVtKey.vtKey, listeningKey)\n        })\n    }\n}\n/**\n * Optimization function to remove listeners from double maps\n */\nfunction removeListenerMap(map: Map<string,Map<string,VelotypeEventListener>>, firstKey: string, secondKey: string): void {\n    const keyListeners = map.get(firstKey)\n    if (keyListeners !== undefined) {\n        const listener = keyListeners.get(secondKey)\n        if (listener !== undefined) {\n            keyListeners.delete(secondKey)\n            if (keyListeners.size <= 0) {\n                map.delete(firstKey)\n            }\n        } else {\n            consoleLog(\"WARN removing event listener, secondKey is not present\", firstKey, secondKey)\n        }\n    } else {\n        consoleLog(\"WARN removing event listener, firstKey is not present\", firstKey, secondKey)\n    }\n}\n/**\n * Emit a VelotypeEvent on a listeningKey\n */\nexport function emitEvent(listeningKey: string, event: VelotypeEvent, hasVtKey?: HasVtKey): void {\n    const keyListeners = listenersF.get(listeningKey)\n    if (keyListeners !== undefined) {\n        keyListeners.entries().forEach(([vtKey, listener]) => {\n            // The Component that emitted the Event does not also receive it\n            if (!hasVtKey || hasVtKey.vtKey != vtKey) {\n                listener(event)\n            }\n        })\n    } else {\n        consoleLog(\"WARN, event emitted with no listeners\", listeningKey, event)\n    }\n}\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n\n\n\n// ----------------------------------------------------------------------\n//                             CSS Style Handling\n// ----------------------------------------------------------------------\n\n/**\n * Append a section of CSS Styles to the page.\n * \n * @param sheetText The CSS text to inject onto the page.\n * @param sheetKey A unique header, used to detect if this style is already added.\n * @param resetSheet If the Stylesheet should be reset if already set (default: false)\n */\nexport function setStylesheet(sheetText: string, sheetKey: string, resetSheet: boolean = false): void {\n    const sheet = styleSectionMounted.get(sheetKey)\n    if (sheet) {\n        // If we should not reset the style, then return\n        if (!resetSheet) {\n            return\n        }\n        // Remove old stylesheet, then continue\n        const index = document.adoptedStyleSheets.findIndex(sh=>sh==sheet.sheet)\n        document.adoptedStyleSheets.splice(index, 1)\n    }\n    const styleSheet = new CSSStyleSheet()\n    styleSheet.replace(sheetText)\n    document.adoptedStyleSheets.push(styleSheet)\n    styleSectionMounted.set(sheetKey, {\n        sheet: styleSheet,\n        text: sheetText,\n        key: sheetKey\n    })\n}\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n", "// deno-lint-ignore-file no-explicit-any\n\nimport {\n    // Debugging access\n    __vtAppMetadata,\n    setDomKey,\n\n    // Interfaces\n    type MultiRenderable,\n    type Mountable,\n    type HasVtKey,\n    type TypeConstructor,\n    type Type,\n\n    // Engine types\n    type BasicTypes,\n    type RenderableElements,\n    type AnchorElement,\n\n    // Core types\n    type FunctionComponent,\n    Component,\n    type EmptyAttrs,\n    type ChildrenAttr,\n    UpdateHandlerLink,\n\n    // Specialized\n    RenderObject,\n    type RenderObjectHandleUpdateType,\n    type RenderObjectRenderFunctionType,\n    RenderBasic,\n    RenderObjectArray,\n    type RenderObjectArrayOptions,\n\n    // TSX integration\n    setAttrsOnElement,\n    createElement,\n    createFragment,\n    getComponent,\n\n    // Event system\n    VelotypeEvent,\n    type VelotypeEventListener,\n    replaceElementWithRoot,\n    emitEvent,\n    registerEventListener,\n    removeEventListeners,\n\n    // Style handling\n    type StyleSection,\n    setStylesheet,\n\n    // Raw HTML support helpers\n    HTML,\n    type HTMLAttrsType,\n    MATH,\n    type MATHAttrsType,\n    SVG,\n    type SVGAttrsType,\n} from \"../tsx/tsx-core.ts\"\n\nexport {\n    // Debugging access\n    __vtAppMetadata,\n    setDomKey,\n\n    // Interfaces\n    type MultiRenderable,\n    type Mountable,\n    type HasVtKey,\n    type TypeConstructor,\n    type Type,\n\n    // Engine types\n    type BasicTypes,\n    type RenderableElements,\n    type AnchorElement,\n\n    // Core types\n    type FunctionComponent,\n    Component,\n    type EmptyAttrs,\n    type ChildrenAttr,\n    UpdateHandlerLink,\n\n    // Specialized\n    RenderObject,\n    type RenderObjectHandleUpdateType,\n    type RenderObjectRenderFunctionType,\n    RenderBasic,\n    RenderObjectArray,\n    type RenderObjectArrayOptions,\n\n    // TSX integration\n    setAttrsOnElement,\n    createElement,\n    createFragment,\n    getComponent,\n\n    // Event system\n    VelotypeEvent,\n    type VelotypeEventListener,\n    replaceElementWithRoot,\n    emitEvent,\n    registerEventListener,\n    removeEventListeners,\n\n    // Style handling\n    type StyleSection,\n    setStylesheet,\n\n    // Raw HTML support helpers\n    HTML,\n    type HTMLAttrsType,\n    MATH,\n    type MATHAttrsType,\n    SVG,\n    type SVGAttrsType,\n}\n\n/**\n * Create an element with a tag, set it's attributes using attrs, then append children\n * \n * ```tsx\n * <tag attrOne={} attrTwo={}>{children}</tag>\n * ```\n */\nexport function jsx(tag: any, attrs: any, key?: string | undefined): RenderableElements[] | AnchorElement | BasicTypes {\n    // Pull children out of attrs\n    const children = attrs.children\n    delete attrs.children\n\n    // Reattach key into attrs if defined\n    if (key !== undefined) {\n        attrs.key = key\n    }\n    return createElement(tag, attrs, children)\n}\n\n/**\n * Create an element with a tag, set it's attributes using attrs, then append children\n * \n * ```tsx\n * <tag attrOne={} attrTwo={}>{children}</tag>\n * ```\n * \n * Note: Velotype does not distinguish between static and dynamic children arrays so jsx and jsxs are identical\n */\nexport const jsxs: (tag: any, attrs: any, key?: string | undefined) => RenderableElements[] | AnchorElement | BasicTypes = jsx\n\n/**\n * Create an fragment `<></>` (which just propagates an array of children[])\n */\nexport const Fragment: (_attrs: Readonly<any>, ...children: RenderableElements[]) => RenderableElements[] = createFragment\n\n// Export the JSX namespace for JSX type checking\nimport type { JSXInternal } from \"../jsx-types/jsx-types.d.ts\"\nexport type { JSXInternal as JSX }\n\n// Export all other jsx-types\nexport type * from \"../jsx-types/dom-types.d.ts\"\n", "import {Component, setStylesheet} from \"jsr:@velotype/velotype\"\nimport type {ChildrenAttr, RenderableElements, FunctionComponent, CSSProperties, EmptyAttrs} from \"jsr:@velotype/velotype\"\n\nexport const ButtonThemeOptions: {\n    spinner: FunctionComponent<EmptyAttrs>\n} = {\n    spinner: function(){return \"...\"}\n}\n\nexport type ButtonType = \"primary\" | \"secondary\" | \"warning\" | \"danger\" | \"text\"\nexport type ButtonAttrsType = {\n    isLoading?: boolean,\n    disabled?: boolean,\n    loadingIcon?: boolean,\n    type?: ButtonType,\n    onClick?: (doneLoading: () => void) => void,\n    style?: CSSProperties | string\n}\nexport class Button<Spinner> extends Component<ButtonAttrsType & ChildrenAttr> {\n    override mount() {\n        setStylesheet(`\n.vtd-btn{\nposition:relative;\npadding:0.25rem 0.5rem;\nborder-radius:0.25rem;\ncursor:pointer;\ndisplay:inline-block;\ntext-align:center;\ntext-decoration:none;\nuser-select:none;\nvertical-align:middle;\nmargin-inline:0.25rem;\ntransition:color 0.25s ease-in-out, background-color 0.25s ease-in-out, border 0.25s ease-in-out;\n}\n\n.vtd-btn-primary{background-color:var(--primary);border:1px solid var(--primary-5);}\n.vtd-btn-primary:hover{background-color:var(--primary-2);border:1px solid var(--primary-7);}\n.vtd-btn-primary:active{background-color:var(--primary-6);}\n.vtd-btn-secondary{background-color:var(--secondary);border:1px solid var(--secondary-5);}\n.vtd-btn-secondary:hover{background-color:var(--secondary-2);border:1px solid var(--secondary-7);}\n.vtd-btn-secondary:active{background-color:var(--secondary-6);}\n.vtd-btn-warning{background-color:var(--warning);border:1px solid var(--warning-5);}\n.vtd-btn-warning:hover{background-color:var(--warning-2);border:1px solid var(--warning-7);}\n.vtd-btn-warning:active{background-color:var(--warning-6);}\n.vtd-btn-danger{background-color:var(--accent);border:1px solid var(--accent-5);}\n.vtd-btn-danger:hover{background-color:var(--accent-2);border:1px solid var(--accent-7);}\n.vtd-btn-danger:active{background-color:var(--accent-6);}\n\n.vtd-btn-text{background-color:transparent;border:1px solid transparent;}\n.vtd-btn-text:hover{background-color:var(--background-2);}\n.vtd-btn-text:active{background-color:var(--background-5);}\n\n.vtd-btn:disabled:hover{cursor:not-allowed;}\n.vtd-btn:focus-visible{border:1px solid var(--accent);}\n`, \"vtd/Button\")\n    }\n\n    isLoading = false\n    override render(attrs: ButtonAttrsType, children: RenderableElements[]) {\n        if (attrs.isLoading) {\n            this.isLoading = true\n        }\n        const spinnerStyle = {\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate3d(-50%, -50%, 0)\",\n            display: \"inline-block\",\n            visibility: \"visible\"\n        }\n        if (attrs.loadingIcon && !this.isLoading) {\n            spinnerStyle.visibility = \"hidden\"\n        }\n        return <button type=\"button\"\n            class={`vtd-btn vtd-btn-${attrs.type||\"primary\"}`}\n            tabindex={0}\n            disabled={attrs.disabled}\n            style={attrs.style}\n            onClick={()=>{\n                if (attrs.loadingIcon && this.isLoading) {\n                    return\n                }\n                if (attrs.onClick) {\n                    attrs.onClick(()=>{\n                        this.isLoading = false\n                        this.refresh()\n                    })\n                }\n                if (attrs.loadingIcon) {\n                    this.isLoading = true\n                    this.refresh()\n                }\n            }}>\n            <span style={(attrs.loadingIcon && this.isLoading)?{color:\"transparent\"}:{}}>{children}</span>\n            {attrs.loadingIcon && <span style={spinnerStyle}><ButtonThemeOptions.spinner/></span> || null}\n        </button>\n    }\n}\n", "\n/** Regular console.log() - used for JS minification */\nexport const consoleLog = console.log\n\n/** Regular console.error() - used for JS minification */\nexport const consoleError = console.error\n\n/** call setAttribute() - used for JS minification */\nexport const setAttributeHelper = function(element: Element | SVGSVGElement | SVGPathElement, qualifiedName: string, value: string) {\n    element.setAttribute(qualifiedName, value)\n}\n\nexport const svgNamespace = \"http://www.w3.org/2000/svg\"\nexport const createElementNSHelper = function(qualifiedName: string) {\n    return document.createElementNS(svgNamespace, qualifiedName)\n}\n", "import { consoleLog } from \"./utilities.ts\"\n\n/** Map of license names to license content */\nexport const licenses = new Map<string,string>()\n\n// ----------------------------------------------------------------------\n//                             License handling\n// ----------------------------------------------------------------------\n\n/** Map of license names to track which have been outout to console.log */\nconst licenseLog = new Set<string>()\nlet initialSetLogged = false\nexport const addLicense = (key: string, text: string) => {\n    if (!licenses.has(key)) {\n        licenses.set(key, text)\n        if (initialSetLogged && !licenseLog.has(key)) {\n            consoleLog(text)\n            licenseLog.add(key)\n        }\n    }\n}\n\n// Initial log output of license text\nsetTimeout(() => {\n    licenses.entries().forEach(([licenseKey, licenseText]) => {\n        consoleLog(licenseText)\n        licenseLog.add(licenseKey)\n    })\n    initialSetLogged = true\n}, 1000)\n\n// ----------------------------------------------------------------------\n// ----------------------------------------------------------------------\n", "import { setStylesheet } from \"jsr:@velotype/velotype\"\nimport { setAttributeHelper } from \"./utilities.ts\"\n\n//\n// TODO make gradients ?\n/*\n--linearPrimarySecondary: linear-gradient( #66b2ff, #c6ff9e);\n--linearPrimaryAccent: linear-gradient( #66b2ff, #ff6666);\n--linearSecondaryAccent: linear-gradient( #c6ff9e, #ff6666);\n--radialPrimarySecondary: radial-gradient( #66b2ff, #c6ff9e);\n--radialPrimaryAccent: radial-gradient( #66b2ff, #ff6666);\n--radialSecondaryAccent: radial-gradient( #c6ff9e, #ff6666);\n*/\n\nexport type ThemeOptions = {\n    textLightColor?: string\n    backgroundLightColor?: string\n    primaryLightColor?: string\n    secondaryLightColor?: string\n    warningLightColor?: string\n    accentLightColor?: string\n\n    textDarkColor?: string\n    backgroundDarkColor?: string\n    primaryDarkColor?: string\n    secondaryDarkColor?: string\n    warningDarkColor?: string\n    accentDarkColor?: string\n}\n\n// Theme generator: https://www.realtimecolors.com/?colors=050505-fafafa-66b2ff-c6ff9e-ff6666&fonts=Inter-Inter\n// Warning color: https://www.realtimecolors.com/?colors=050505-fafafa-66b2ff-ffd666-ff6666&fonts=Inter-Inter\nconst defaultTextLightColor = \"#050505\"\nconst defaultBackgroundLightColor = \"#fafafa\"\nconst defaultPrimaryLightColor = \"#66b2ff\"\nconst defaultSecondaryLightColor = \"#c6ff9e\"\nconst defaultWarningLightColor = \"#ffd666\"\nconst defaultAccentLightColor = \"#ff6666\"\n\n// Theme generator: https://www.realtimecolors.com/?colors=fafafa-202020-004c99-286100-990000&fonts=Inter-Inter\n// Warning color: https://www.realtimecolors.com/?colors=fafafa-202020-004c99-997000-990000&fonts=Inter-Inter\nconst defaultTextDarkColor = \"#fafafa\"\nconst defaultBackgroundDarkColor = \"#202020\"\nconst defaultPrimaryDarkColor = \"#004c99\"\nconst defaultSecondaryDarkColor = \"#286100\"\nconst defaultWarningDarkColor = \"#997000\"\nconst defaultAccentDarkColor = \"#990000\"\n\nconst colorMix = \":color-mix(in hsl,\"\n\nconst middleSpread = [-6,-4,-2,0,2,4,6]\n/**\n * Creates a spread of colors:\n * \n * \n * --{cssColorPrefix}-1 -> 60% mix of color1\n * --{cssColorPrefix}-2 -> 40% mix of color1\n * --{cssColorPrefix}-3 -> 20% mix of color1\n * --{cssColorPrefix}-4 ->   exact color2\n * --{cssColorPrefix}-5 -> 20% mix of color3\n * --{cssColorPrefix}-6 -> 40% mix of color3\n * --{cssColorPrefix}-7 -> 60% mix of color3\n * \n * --{cssColorPrefix}   ->   exact color2\n * \n * \n * @param cssColorPrefix the name of the color spread\n * @param color1 the color for 1-3 mixes\n * @param color2 the main color\n * @param color3 the color for 5-7 mixes\n * @returns \n */\nconst middleColorSpread = (cssColorPrefix: string, color1: string, color2: string, color3: string) => {\n    return middleSpread.map(e=> {\n        if (e<0) {\n            return `--${cssColorPrefix}-${e/2+4}${colorMix}${color1} ${-1*e}0%,${color2} ${10+e}0%)`\n        } else if (e==0) {\n            return `--${cssColorPrefix}-4:${color2};--${cssColorPrefix}:${color2}`\n        }\n        return `--${cssColorPrefix}-${e/2+4}${colorMix}${color2} ${10-e}0%,${color3} ${e}0%)`\n    }).join(\";\")+\";\"\n}\nconst gradient = [1,2,3,4,5,8,9]\n/**\n * Creates a gradient of colors:\n * \n * --{cssColorPrefix}   -> exact color1\n * --{cssColorPrefix}-1 -> 10% mix of color2\n * --{cssColorPrefix}-2 -> 20% mix of color2\n * --{cssColorPrefix}-3 -> 30% mix of color2\n * --{cssColorPrefix}-4 -> 40% mix of color2\n * --{cssColorPrefix}-5 -> 50% mix of color2\n * \n * --{cssColorPrefix}-8 -> 80% mix of color2\n * --{cssColorPrefix}-9 -> 90% mix of color2\n\n * @param cssColorPrefix\n * @param color1 the main color\n * @param color2 \n * @returns \n */\nconst colorGradient = (cssColorPrefix: string, color1: string, color2: string) => {\n    return gradient.map(e=>`--${cssColorPrefix}-${e}${colorMix}${color1} ${10-e}0%,${color2} ${e}0%)`).join(\";\")+`;--${cssColorPrefix}:${color1};`\n}\n\nconst setTheme = function(theme: string) {\n    setAttributeHelper(document.getElementsByTagName(\"html\")[0],\"data-theme\",theme)\n}\nconst localThemeKey = \"vtd-preferredtheme\"\ntype ColorSchemeType = \"light\" | \"dark\" | \"default\"\nconst light = \"light\"\nconst dark = \"dark\"\nconst defaultScheme = \"default\"\nlet colorScheme: ColorSchemeType = light\nexport const Theme = {\n    getColorScheme: function() {\n        return colorScheme\n    },\n    setColorScheme: function(newScheme: ColorSchemeType) {\n        localStorage.setItem(localThemeKey, newScheme)\n        Theme.resetColorScheme()\n    },\n    resetColorScheme: function() {\n        const localColorScheme = localStorage.getItem(localThemeKey)\n        if (localColorScheme) {\n            const prefersColorSchemeLight = globalThis.matchMedia('(prefers-color-scheme: light)').matches\n            if (localColorScheme == dark) {\n                colorScheme = dark\n            } else if (localColorScheme == light) {\n                colorScheme = light\n            } else if (localColorScheme == defaultScheme) {\n                // Use browser default\n                if (prefersColorSchemeLight) {\n                    colorScheme = light\n                } else {\n                    colorScheme = dark\n                }\n            } else {\n                //Invalid value, reset localStorage\n                localStorage.removeItem(localThemeKey)\n                // Use browser default\n                if (prefersColorSchemeLight) {\n                    colorScheme = light\n                } else {\n                    colorScheme = dark\n                }\n            }\n        }\n        // Set theme on the html element\n        if (colorScheme == light) {\n            setTheme(light)\n        } else {\n            setTheme(dark)\n        }\n    },\n    addVelodesignStyles(options?: ThemeOptions, includeCSSReset: boolean = true) {\n        // Optionally add Reset styles\n        if (includeCSSReset) {//1em + 0.5rem\n            setStylesheet(`*{margin:0;padding:0;line-height:calc(2ex + 4px);box-sizing:border-box;}\nhtml{-moz-text-size-adjust:none;-webkit-text-size-adjust:none;text-size-adjust:none;scroll-behavior:smooth;}\nbody{-webkit-font-smoothing:antialiased;min-width:250px}\nimg,svg{display:inline-block;max-width:100%;}\ninput,button,textarea,select{font:inherit;}\np,h1,h2,h3{overflow-wrap:break-word;}\np{text-wrap:pretty;}\nh1,h2,h3{text-wrap:balance;}\nmenu,ul,ol{list-style:none;}\nbutton{color:inherit;border:none;}\n:target{scroll-margin-block:20ex;}`,\"Velodesign CSS reset\")\n        }\n\n        const white = \"#fff\"\n        const black = \"#000\"\n        setStylesheet(`\n:root[data-theme=\"light\"]{\n${colorGradient(\"text\", options?.textLightColor || defaultTextLightColor, white)}\n${colorGradient(\"background\", options?.backgroundLightColor || defaultBackgroundLightColor, black)}\n${middleColorSpread(\"primary\", white, options?.primaryLightColor || defaultPrimaryLightColor, black)}\n${middleColorSpread(\"secondary\", white, options?.secondaryLightColor || defaultSecondaryLightColor, black)}\n${middleColorSpread(\"warning\", white, options?.warningLightColor || defaultWarningLightColor, black)}\n${middleColorSpread(\"accent\", white, options?.accentLightColor || defaultAccentLightColor, black)}\ncolor-scheme:light;}\n:root[data-theme=\"dark\"]{\n${colorGradient(\"text\", options?.textDarkColor || defaultTextDarkColor, black)}\n${colorGradient(\"background\", options?.backgroundDarkColor || defaultBackgroundDarkColor, white)}\n${middleColorSpread(\"primary\", black, options?.primaryDarkColor || defaultPrimaryDarkColor, white)}\n${middleColorSpread(\"secondary\", black, options?.secondaryDarkColor || defaultSecondaryDarkColor, white)}\n${middleColorSpread(\"warning\", black, options?.warningDarkColor || defaultWarningDarkColor, white)}\n${middleColorSpread(\"accent\", black, options?.accentDarkColor || defaultAccentDarkColor, white)}\ncolor-scheme:dark;}\nbody{color:var(--text);background-color:var(--background);}\na{color:var(--text)}`,\"Velodesign Theme Colors\")\n\n        // Delay setting transitions so that the page loads cleanly\n        globalThis.setTimeout(function(){\n            setStylesheet(`body{transition:color 0.25s ease-in-out,background-color 0.25s ease-in-out;}`,\"Velodesign Theme Color transitions\")\n        },150)\n\n        //Trigger initial color scheme selection\n        Theme.resetColorScheme()\n    }\n}\n", "import { ChildrenAttr, Component, EmptyAttrs, RenderableElements } from \"jsr:@velotype/velotype/jsx-runtime\"\nimport { Button } from \"../../src/button.tsx\"\nimport { Theme } from \"../../src/theme.ts\"\n\nclass NavSchemeSelector extends Component<EmptyAttrs> {\n    override render() {\n        return <div style=\"display:contents;\">\n            <Button style={{marginBlock: \"0.25rem\"}} onClick={()=>{\n                if (Theme.getColorScheme() == \"light\") {\n                    Theme.setColorScheme(\"dark\")\n                } else {\n                    Theme.setColorScheme(\"light\")\n                }\n                globalThis.setTimeout(()=>{\n                    this.refresh()\n                },100)\n            }}>Dark mode:{(Theme.getColorScheme() == \"light\")?'off':'on'}</Button>\n        </div>\n    }\n}\n\nexport class TestModulePage extends Component<ChildrenAttr> {\n    override render(_attrs: EmptyAttrs, children: RenderableElements[]) {\n        return <div>\n            <div><a href='/'>Home page</a></div>\n            <div><NavSchemeSelector/></div>\n            <div>{children}</div>\n        </div>\n    }\n}\n", "import {replaceElementWithRoot, Component} from \"jsr:@velotype/velotype\"\nimport type {EmptyAttrs} from \"jsr:@velotype/velotype\"\n\nimport {Button, ButtonType, Theme} from \"../../src/index.ts\"\nimport { TestModulePage } from \"./module-page.tsx\";\n\nconst renderButton = function(btype: ButtonType) {\n    return <div>\n        <Button type={btype}>{btype} button</Button>\n        <Button type={btype} disabled>{btype} button (disabled)</Button>\n        <Button type={btype} loadingIcon onClick={(resolve)=>{\n            setTimeout(resolve,1000)\n        }}>{btype} button (with loader)</Button>\n    </div>\n}\nclass ButtonGallery extends Component<EmptyAttrs> {\n    override render() {\n        return <div>\n            <div style={{marginTop:\"10px\"}}><Button>default button</Button></div>\n            <div style={{marginTop:\"10px\"}}>{renderButton(\"primary\")}</div>\n            <div style={{marginTop:\"10px\"}}>{renderButton(\"secondary\")}</div>\n            <div style={{marginTop:\"10px\"}}>{renderButton(\"warning\")}</div>\n            <div style={{marginTop:\"10px\"}}>{renderButton(\"danger\")}</div>\n            <div style={{marginTop:\"10px\"}}>{renderButton(\"text\")}</div>\n        </div>\n    }\n}\n\nTheme.addVelodesignStyles()\n\n// Place on the page\nconst mainPage = document.getElementById(\"main-page\")\nif (mainPage) {\n    replaceElementWithRoot(<TestModulePage><ButtonGallery/></TestModulePage>, mainPage)\n}"],
  "mappings": "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",
  "names": ["consoleLog", "setAttributeHelper", "consoleLog", "setAttributeHelper"]
}
